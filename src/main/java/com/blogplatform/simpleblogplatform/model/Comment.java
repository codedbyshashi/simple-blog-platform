package com.blogplatform.simpleblogplatform.model;

// Import the necessary JPA annotations to mark this class as an entity
// and configure its primary key.
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

import java.time.LocalDateTime;

/**
 * Represents a comment entity made by a user on a post.
 * The @Entity annotation signals to JPA that this class should be mapped to a database table.
 */
@Entity // <-- NEW: Marks this class as a JPA entity.
public class Comment {

    // @Id marks this field as the primary key for the 'comment' table.
    @Id
    // @GeneratedValue specifies that the ID should be automatically generated by the database.
    // The IDENTITY strategy is the most common and efficient choice for this.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // <-- NEW: Configures the primary key.
    private Long id;

    // The main body/text of the comment. We will map this to a database column
    // that can hold a reasonable amount of text.
    private String content;

    // A timestamp for when the comment was created. We use the modern `java.time.LocalDateTime`
    // for its precision and developer-friendly API.
    private LocalDateTime createdAt;

    // A no-argument constructor is a strict requirement for any JPA entity.
    // Hibernate uses this constructor via reflection to create an instance of this class
    // before populating it with data fetched from the database.
    public Comment() {
    }

    // --- Getters and Setters ---
    // These public methods provide controlled access to the private fields,
    // adhering to the principle of Encapsulation. They are essential for frameworks
    // like Spring, Thymeleaf, and Jackson to interact with our objects.

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    // It's also a good practice to override the toString() method for logging and debugging.
    // This provides a readable representation of the object.
    @Override
    public String toString() {
        return "Comment{" +
                "id=" + id +
                ", content='" + content + '\'' +
                ", createdAt=" + createdAt +
                '}';
    }
}